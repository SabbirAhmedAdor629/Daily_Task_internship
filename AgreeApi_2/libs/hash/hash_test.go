package im_hash

import (
	"reflect"
	"testing"
)

func TestHashSha256(t *testing.T) {
	type args struct {
		src  Uuid
		hash bool
	}
	tests := []struct {
		name    string
		args    args
		want    Hash
		wantErr bool
	}{
		{
			name: "Test SHA256: #1: c64e899f-8ad5-4952-9353-f3b4d07aa6ca",
			args: args{
				src:  Uuid("c64e899f-8ad5-4952-9353-f3b4d07aa6ca"),
				hash: true,
			},
			want: []byte{
				0xe8, 0xdc, 0xa3, 0x12, 0xba, 0x47, 0x3d, 0xa5,
				0x64, 0x7b, 0x9c, 0xef, 0x70, 0xaf, 0xc6, 0x5b,
				0x1c, 0x78, 0x99, 0x28, 0x23, 0x72, 0x60, 0x9d,
				0x73, 0xda, 0x08, 0x6c, 0x4f, 0xf5, 0xf8, 0xef},
			wantErr: false,
		},
		{
			name: "Test SHA256: #2: c64e899f8ad549529353f3b4d07aa6ca",
			args: args{
				src:  []byte("c64e899f8ad549529353f3b4d07aa6ca"),
				hash: true,
			},
			want: []byte{
				0xed, 0xa8, 0xfa, 0xa0, 0xe6, 0xaf, 0x96, 0xed,
				0x65, 0xe6, 0x8c, 0x0e, 0x9e, 0xd4, 0xd4, 0x9e,
				0x02, 0xb2, 0xab, 0xc5, 0xcf, 0x05, 0xc3, 0x18,
				0x89, 0x45, 0xeb, 0x4a, 0xc1, 0xed, 0xdc, 0x0e},
			wantErr: false,
		},
		{
			name: "Test SHA256: #3: 5bf2b2f4-3d96-4682-80c7-66ac0084e0c1",
			args: args{
				src:  []byte("5bf2b2f4-3d96-4682-80c7-66ac0084e0c1"),
				hash: true,
			},
			want: []byte{
				0xa2, 0xaf, 0x7a, 0xe8, 0x92, 0xe1, 0x6d, 0x45,
				0xc8, 0x0f, 0x2c, 0x7e, 0x49, 0xd7, 0x92, 0x60,
				0x87, 0x6e, 0x87, 0xe0, 0xb8, 0x2f, 0xa7, 0x1e,
				0xb3, 0x76, 0x92, 0x5f, 0x87, 0xc4, 0x7f, 0xb8},
			wantErr: false,
		},
		{
			name: "Test SHA256: #4: ce996f74-e26c-4cd3-aa9b-4b7b14661218",
			args: args{
				src:  []byte("ce996f74-e26c-4cd3-aa9b-4b7b14661218"),
				hash: true,
			},
			want: []byte{
				0x7f, 0xb4, 0x50, 0x4b, 0xf9, 0xa0, 0x83, 0x69,
				0x71, 0x12, 0xf9, 0x0d, 0xf3, 0x2d, 0x4a, 0xf6,
				0xb6, 0x8b, 0x34, 0xe0, 0xa9, 0x98, 0x0e, 0x6c,
				0xf1, 0xb9, 0xed, 0x3b, 0xf6, 0xc2, 0xba, 0xdd},
			wantErr: false,
		},
		{
			name: "Test NO-SHA256 -- > [32]byte: #5: a2af7ae892e16d45c80f2c7e49d79260876e87e0b82fa71eb376925f87c47fb8ff",
			args: args{
				src:  []byte("a2af7ae892e16d45c80f2c7e49d79260876e87e0b82fa71eb376925f87c47fb8ff"),
				hash: false,
			},
			want:    []byte{},
			wantErr: true,
		},
		{
			name: "Test NO-SHA256 -- < [32]byte: #6: a2af7ae892e16d45c80f2c7e49d79260876e87e0b82fa71eb376925f87c47f",
			args: args{
				src:  []byte("a2af7ae892e16d45c80f2c7e49d79260876e87e0b82fa71eb376925f87c47f"),
				hash: false,
			},
			want:    []byte{},
			wantErr: true,
		},
		{
			name: "Test NO-SHA256 -- DUPLICATE: #6: a2af7ae892e16d45c80f2c7e49d79260876e87e0b82fa71eb376925f87c47fb8",
			args: args{
				src: []byte{
					0xa2, 0xaf, 0x7a, 0xe8, 0x92, 0xe1, 0x6d, 0x45,
					0xc8, 0x0f, 0x2c, 0x7e, 0x49, 0xd7, 0x92, 0x60,
					0x87, 0x6e, 0x87, 0xe0, 0xb8, 0x2f, 0xa7, 0x1e,
					0xb3, 0x76, 0x92, 0x5f, 0x87, 0xc4, 0x7f, 0xb8},
				hash: false,
			},
			want: []byte{
				0xa2, 0xaf, 0x7a, 0xe8, 0x92, 0xe1, 0x6d, 0x45,
				0xc8, 0x0f, 0x2c, 0x7e, 0x49, 0xd7, 0x92, 0x60,
				0x87, 0x6e, 0x87, 0xe0, 0xb8, 0x2f, 0xa7, 0x1e,
				0xb3, 0x76, 0x92, 0x5f, 0x87, 0xc4, 0x7f, 0xb8},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := HashSha256(tt.args.src, tt.args.hash)
			if (err != nil) != tt.wantErr {
				t.Errorf("TestHashSha256() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TestHashSha256() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestValidateHashedAdId(t *testing.T) {
	type args struct {
		src Hash
	}
	tests := []struct {
		name    string
		args    args
		want    Hash
		wantErr bool
	}{
		{
			name: "Test HASH #1: a2af7ae892e16d45c80f2c7e49d79260876e87e0b82fa71eb376925f87c47fb8",
			args: args{
				src: Hash{
					0xa2, 0xaf, 0x7a, 0xe8, 0x92, 0xe1, 0x6d, 0x45,
					0xc8, 0x0f, 0x2c, 0x7e, 0x49, 0xd7, 0x92, 0x60,
					0x87, 0x6e, 0x87, 0xe0, 0xb8, 0x2f, 0xa7, 0x1e,
					0xb3, 0x76, 0x92, 0x5f, 0x87, 0xc4, 0x7f, 0xb8,
				},
			},
			want: []byte{
				0xa2, 0xaf, 0x7a, 0xe8, 0x92, 0xe1, 0x6d, 0x45,
				0xc8, 0x0f, 0x2c, 0x7e, 0x49, 0xd7, 0x92, 0x60,
				0x87, 0x6e, 0x87, 0xe0, 0xb8, 0x2f, 0xa7, 0x1e,
				0xb3, 0x76, 0x92, 0x5f, 0x87, 0xc4, 0x7f, 0xb8,
			},
			wantErr: false,
		},
		{
			name: "Test HASH #2: ffeb156416fcee899758eaccc724174cd03908e1aa90c7d09e26454376bc56f9",
			args: args{
				src: Hash{
					0xff, 0xeb, 0x15, 0x64, 0x16, 0xfc, 0xee, 0x89,
					0x97, 0x58, 0xea, 0xcc, 0xc7, 0x24, 0x17, 0x4c,
					0xd0, 0x39, 0x08, 0xe1, 0xaa, 0x90, 0xc7, 0xd0,
					0x9e, 0x26, 0x45, 0x43, 0x76, 0xbc, 0x56, 0xf9,
				},
			},
			want: []byte{
				0xff, 0xeb, 0x15, 0x64, 0x16, 0xfc, 0xee, 0x89,
				0x97, 0x58, 0xea, 0xcc, 0xc7, 0x24, 0x17, 0x4c,
				0xd0, 0x39, 0x08, 0xe1, 0xaa, 0x90, 0xc7, 0xd0,
				0x9e, 0x26, 0x45, 0x43, 0x76, 0xbc, 0x56, 0xf9},
			wantErr: false,
		},
		{
			name: "Test HASH #3: ffeb156416fcee899758eaccc724174cd03908e1aa90c7d09e26454376bc56f9aa",
			args: args{
				src: Hash{
					0xff, 0xeb, 0x15, 0x64, 0x16, 0xfc, 0xee, 0x89,
					0x97, 0x58, 0xea, 0xcc, 0xc7, 0x24, 0x17, 0x4c,
					0xd0, 0x39, 0x08, 0xe1, 0xaa, 0x90, 0xc7, 0xd0,
					0x9e, 0x26, 0x45, 0x43, 0x76, 0xbc, 0x56, 0xf9,
					0xaa,
				},
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "Test HASH #4: ffeb156416fcee899758eaccc724174cd03908e1aa90c7d09e26454376bc56",
			args: args{
				src: Hash{
					0xff, 0xeb, 0x15, 0x64, 0x16, 0xfc, 0xee, 0x89,
					0x97, 0x58, 0xea, 0xcc, 0xc7, 0x24, 0x17, 0x4c,
					0xd0, 0x39, 0x08, 0xe1, 0xaa, 0x90, 0xc7, 0xd0,
					0x9e, 0x26, 0x45, 0x43, 0x76, 0xbc, 0x56,
				},
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "Test UUID: #5: Not Hex",
			args: args{
				src: Hash("ffeb156416fcee899758eaccc724174cd03908e1aa90c7d09e26454376bc56Z9"),
			},
			want:    nil,
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := ValidateHashedAdId(tt.args.src)
			if (err != nil) != tt.wantErr {
				t.Errorf("TestValidateHashedAdId() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TestValidateHashedAdId() = %v, want %v", got, tt.want)
			}
		})
	}
}
